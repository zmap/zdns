//go:build ignore
// +build ignore

// answers_generate.go is meant to run with go generate. It will use
// go/{importer,types} to track down all the DNS answer struct types that embed
// the Answer struct. Then for each type, it will generate extraction and conversion
// methods based on the struct tags. The generated source is written to answers_common.go,
// and is meant to be checked into git.
package main

import (
	"bytes"
	"go/format"
	"go/types"
	"log"
	"os"
	"text/template"

	"golang.org/x/tools/go/packages"
)

var packageHdr = `
// Code generated by "go run answers_generate.go"; DO NOT EDIT.

package zdns

`

var baseAnsFunc = template.Must(template.New("answerHeaderFunc").Parse(`
func (ans Answer) BaseAns() *Answer { return &ans }
{{range .}}  func (ans {{.}}) BaseAns() *Answer { return &ans.Answer }
{{end}}
`))

func main() {
	// Import and type-check the package
	pkg, err := loadModule("github.com/zmap/zdns/src/zdns")
	fatalIfErr(err)
	scope := pkg.Scope()

	// Collect all answer types (*X) that embed the Answer struct
	var answerTypes []string
	for _, name := range scope.Names() {
		o := scope.Lookup(name)
		if o == nil || !o.Exported() {
			continue
		}
		if _, isAnswerType := getAnswerType(o.Type(), scope); isAnswerType {
			answerTypes = append(answerTypes, o.Name())
		}
	}

	b := &bytes.Buffer{}
	b.WriteString(packageHdr)

	// Generate answerHeaderFunc
	fatalIfErr(baseAnsFunc.Execute(b, answerTypes))

	// Format the generated code
	res, err := format.Source(b.Bytes())
	if err != nil {
		b.WriteTo(os.Stderr)
		log.Fatal(err)
	}

	// Write the result to answers_helper.go
	f, err := os.Create("answers_helper.go")
	fatalIfErr(err)
	defer f.Close()
	f.Write(res)
}

// loadModule retrieves package description for a given module.
func loadModule(name string) (*types.Package, error) {
	conf := packages.Config{Mode: packages.NeedTypes | packages.NeedTypesInfo}
	pkgs, err := packages.Load(&conf, name)
	if err != nil {
		return nil, err
	}
	return pkgs[0].Types, nil
}

// getAnswerType checks if a type embeds the Answer struct and returns true if it does.
func getAnswerType(t types.Type, scope *types.Scope) (*types.Struct, bool) {
	st, ok := t.Underlying().(*types.Struct)
	if !ok {
		return nil, false
	}
	if st.NumFields() == 0 {
		return nil, false
	}
	if st.Field(0).Type() == scope.Lookup("Answer").Type() {
		return st, true
	}
	return nil, false
}

func fatalIfErr(err error) {
	if err != nil {
		log.Fatal(err)
	}
}
